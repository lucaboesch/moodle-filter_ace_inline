{"version":3,"file":"ui_parameters.min.js","sources":["../../src/local/ui_parameters.js"],"sourcesContent":["/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n/**\n * JavaScript for the uiParameters class.\n *\n * @module     filter_ace_inline/local/ui_parameters\n * @copyright  Richard Lobb, Michelle Hsieh 2022\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst MIN_WINDOW_LINES = 1;\nconst MAX_WINDOW_LINES = 50;\nconst MAX_OUTPUT_LENGTH = 30000;\n\n// Ace highlight parameters.\nconst ACE_HIGHLIGHT = {\n    'class': 'ace_highlight_code',\n    'lang': 'python3',\n    'ace-lang': '',\n    'font-size': '11pt',\n    'start-line-number': null,\n    'min-lines': MIN_WINDOW_LINES,\n    'max-lines': MAX_WINDOW_LINES,\n    'readonly': true,\n    'dark-theme-mode': null,\n    'style': ''\n};\n\n// Ace interactive parameters.\nconst ACE_INTERACTIVE = {\n    'class': 'ace_interactive_code',\n    'lang': 'python3',\n    'ace-lang': '',\n    'font-size': '11pt',\n    'hidden': false,\n    'start-line-number': 1,\n    'button-name': 'Try it!',\n    'readonly': null,\n    'stdin': '',\n    'stdin-taid': '',\n    'file-taids': {},\n    'file-upload-id': null,\n    'prefix': '',\n    'suffix': '',\n    'params': '{\"cputime\": 5}',\n    'code-mapper': null,\n    'html-output': null,\n    'min-lines': MIN_WINDOW_LINES,\n    'max-lines': MAX_WINDOW_LINES,\n    'max-output-length': MAX_OUTPUT_LENGTH,\n    'dark-theme-mode': null,\n    'style': ''\n};\n\nexport class UiParameters {\n    constructor(pre) {\n        this.pre = pre;\n        this.paramsMap = {};\n        this.modifiedLang = false;\n        this.execLang = null;\n        this.stdin = '';\n        this.files = null;\n        this.htmlOutput = null;\n        this.sandboxParams = [];\n    }\n\n    /**\n     * Extract from the given DOM pre element its various attributes.\n     * @param {boolean} isInteractive True if is interactive, else false.\n     * @param {array} config Config for buttons and darkmode.\n     */\n    extractUiParameters(isInteractive, config) {\n        // Adds defaults.\n        const defaultParams = isInteractive ? ACE_INTERACTIVE : ACE_HIGHLIGHT;\n        if (isInteractive) {\n            defaultParams['button-name'] = config.button_label;\n        }\n        for (const attrName in defaultParams) {\n            if (defaultParams.hasOwnProperty(attrName)) {\n                let value = '';\n                let dataName = '';\n                let attr = this.pre.attributes.getNamedItem(attrName);\n                if (attr) {\n                    dataName = attrName;\n                } else { // Try data- as a prefix if 'raw' access fails.\n                    dataName = 'data-' + attrName;\n                    attr = this.pre.attributes.getNamedItem(dataName);\n                }\n                if (attr) {\n                    value = attr.value;\n                    switch (attrName) {\n                        case 'start-line-number':\n                            value = value.toLowerCase() === 'none' ? null : parseInt(value);\n                            break;\n                        case 'min-lines':\n                        case 'max-lines':\n                            value = parseInt(value);\n                            break;\n                        case 'hidden':\n                            value = true; // If the 'hidden' attribute exists, it's True!\n                            break;\n                        case 'lang':\n                            this.modifiedLang = true; // Keeps track of modifications, so no overrides.\n                            break;\n                        default:\n                            break;\n                    }\n                } else {\n                value = defaultParams[attrName];\n                }\n            this.paramsMap[attrName] = value;\n            }\n        }\n\n        // Sets dark theme according to config if not previously set.\n        if (this.paramsMap['dark-theme-mode'] === null) {\n            this.paramsMap['dark-theme-mode'] = config.dark_theme_mode; // 0, 1, 2 for never, sometimes, always\n        }\n        // Extracts the Tiny Parameters out.\n        this.extractTinyParams();\n    }\n\n    /**\n     * Extract the language from the TinyMCE code editor.\n     */\n    extractTinyParams() {\n        // Takes the data-lang from the class if edited using Prism TinyMCE editor filter.\n        const splitClass = this.paramsMap.class.split(\" \");\n        // Left open so can deal with more attributes if desired.\n        splitClass.forEach((attribute) => {\n            if (attribute.startsWith('language') && this.modifiedLang === false) {\n                this.paramsMap.lang = attribute.replace('language-', '');\n            }\n        });\n        // Handle the one case of python3 in JOBE.\n        if (this.paramsMap.lang === 'python') {\n            this.paramsMap.lang = 'python3';\n        }\n    }\n\n    /**\n     * Sets the uiParameter of stdin 'stdin-taid' which should be the id of an element.\n     */\n    setStdin() {\n        const taid = this.paramsMap['stdin-taid'];\n        const stdin = this.paramsMap.stdin;\n        if (taid) {\n            const box = document.querySelector('#' + taid);\n            // Handles invalid textarea names.\n            if (box === null) {\n                this.stdin = null;\n            } else {\n                this.stdin = box.value;\n            }\n        } else if (stdin) {\n            this.stdin = stdin;\n        } else {\n            this.stdin = '';\n        }\n    }\n\n    /**\n     * Sets the uiParameter of files.\n     *\n     * @param {type} files The files to be processed.\n     */\n    setFiles(files) {\n        this.files = files;\n    }\n\n    /**\n     * Sets the execution language.\n     *\n     * @param {type} lang The coding language to be used.\n     */\n    setExecLang(lang) {\n        this.execLang = lang;\n    }\n\n    /**\n     * Sets HTML output.\n     *\n     * @param {type} hasHtml If not null, there is Html output.\n     */\n    setHtmlOutput(hasHtml) {\n        this.htmlOutput = hasHtml;\n    }\n\n    /**\n     * Sets the uiParams' params Array to all files.\n     *\n     * @param {Array} paramsArray An array of all the filenames used.\n     */\n    setSandboxParams(paramsArray) {\n        this.sandboxParams = paramsArray;\n    }\n\n    /**\n     * Sets run-params in the paramsMap to be executed on run.\n     *\n     * @param {String} paramsString A JSON-compliant params string.\n     */\n    setRunParams(paramsString) {\n        this.paramsMap['run-params'] = paramsString;\n    }\n}\n"],"names":["ACE_HIGHLIGHT","ACE_INTERACTIVE","UiParameters","pre","paramsMap","modifiedLang","execLang","stdin","files","htmlOutput","sandboxParams","isInteractive","config","defaultParams","attrName","button_label","hasOwnProperty","value","dataName","attr","this","attributes","getNamedItem","toLowerCase","parseInt","dark_theme_mode","extractTinyParams","class","split","forEach","attribute","startsWith","_this","lang","replace","taid","box","document","querySelector","hasHtml","paramsArray","paramsString"],"mappings":";;;;;;;;IA8BMA,cAAgB,OACT,0BACD,qBACI,eACC,2BACQ,iBAVA,cACA,aAYT,oBACO,WACV,IAIPC,gBAAkB,OACX,4BACD,qBACI,eACC,eACH,sBACW,gBACN,mBACH,WACH,gBACK,gBACA,oBACI,YACR,UACA,UACA,+BACK,mBACA,iBApCM,cACA,uBACC,sBAsCH,WACV,IAGAC,8CACGC,6JACHA,IAAMA,SACNC,UAAY,QACZC,cAAe,OACfC,SAAW,UACXC,MAAQ,QACRC,MAAQ,UACRC,WAAa,UACbC,cAAgB,wHAQzB,SAAoBC,cAAeC,YAEzBC,cAAgBF,cAAgBV,gBAAkBD,kBAInD,IAAMc,YAHPH,gBACAE,cAAc,eAAiBD,OAAOG,cAEnBF,iBACfA,cAAcG,eAAeF,UAAW,KACpCG,MAAQ,GACRC,SAAW,GACXC,KAAOC,KAAKjB,IAAIkB,WAAWC,aAAaR,aACxCK,KACAD,SAAWJ,UAEXI,SAAW,QAAUJ,SACrBK,KAAOC,KAAKjB,IAAIkB,WAAWC,aAAaJ,WAExCC,YACAF,MAAQE,KAAKF,MACLH,cACC,oBACDG,MAAgC,SAAxBA,MAAMM,cAA2B,KAAOC,SAASP,iBAExD,gBACA,YACDA,MAAQO,SAASP,iBAEhB,SACDA,OAAQ,YAEP,YACIZ,cAAe,OAMhCY,MAAQJ,cAAcC,eAErBV,UAAUU,UAAYG,MAKW,OAAtCG,KAAKhB,UAAU,0BACVA,UAAU,mBAAqBQ,OAAOa,sBAG1CC,qDAMT,0BAEuBN,KAAKhB,UAAUuB,MAAMC,MAAM,KAEnCC,SAAQ,SAACC,WACZA,UAAUC,WAAW,cAAqC,IAAtBC,MAAK3B,eACzC2B,MAAK5B,UAAU6B,KAAOH,UAAUI,QAAQ,YAAa,QAIjC,WAAxBd,KAAKhB,UAAU6B,YACV7B,UAAU6B,KAAO,mCAO9B,eACUE,KAAOf,KAAKhB,UAAU,cACtBG,MAAQa,KAAKhB,UAAUG,SACzB4B,KAAM,KACAC,IAAMC,SAASC,cAAc,IAAMH,WAGhC5B,MADG,OAAR6B,IACa,KAEAA,IAAInB,gBAGhBV,MADEA,OAGM,2BASrB,SAASC,YACAA,MAAQA,iCAQjB,SAAYyB,WACH3B,SAAW2B,kCAQpB,SAAcM,cACL9B,WAAa8B,wCAQtB,SAAiBC,kBACR9B,cAAgB8B,wCAQzB,SAAaC,mBACJrC,UAAU,cAAgBqC"}